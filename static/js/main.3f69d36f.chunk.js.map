{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","target","value","name","setState","defineProperty","handleSubmit","preventDefault","canvas","document","querySelector","innerHTML","style","backgroundColor","x","state","height","row","createElement","appendChild","y","width","cell","handleCellColor","color","cellColor","hex","handleCellColorOnClick","handleBackgroundColor","background","handleColorRemove","react_default","a","className","id","type","min","onChange","onClick","lib","onChangeComplete","onMouseDown","onTouchStart","onDoubleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f69d36f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { CirclePicker } from 'react-color';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 15,\n      width: 15,\n      background: '#fff',\n      cellColor: '#000'\n    };\n  }\n\n  handleChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const canvas = document.querySelector(\"#pixel_canvas\");\n    canvas.innerHTML = '';\n    canvas.style.backgroundColor = 'white';\n\n    for (let x = 0; x < this.state.height; x++) {\n      let row = document.createElement(\"tr\");\n      canvas.appendChild(row);\n\n      for (let y = 0; y < this.state.width; y++) {\n        let cell = document.createElement(\"td\");\n        row.appendChild(cell);\n      }\n    }\n  }\n\n  // Cell color\n  handleCellColor = (color) => {\n    this.setState({ cellColor: color.hex });\n  }\n\n  handleCellColorOnClick = (event) => {\n    event.target.style.backgroundColor = this.state.cellColor;\n  }\n\n  // Table background color\n  handleBackgroundColor = (color) => {\n    this.setState({ background: color.hex });\n  };\n\n  // Remove color\n  handleColorRemove = (event) => {\n    event.target.style.backgroundColor = '';\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n          <h1>Pixel Art Maker</h1>\n        </header>\n\n        <div className=\"App-Content\">\n          <div className=\"App-Settings\">\n            <h2>Canvas Settings</h2>\n            {/*<h3>Choose Grid Size</h3>*/}\n            <form id=\"sizePicker\">\n              <label>\n              Grid Height:\n              <input\n                type=\"number\"\n                id=\"input_height\"\n                name=\"height\"\n                min=\"1\"\n                value={this.state.height}\n                onChange={this.handleChange} />\n              </label>\n              <br />\n              <label>\n              Grid Width:\n              <input\n                type=\"number\"\n                id=\"input_width\"\n                name=\"width\"\n                min=\"1\"\n                value={this.state.width}\n                onChange={this.handleChange} />\n              </label>\n              <p>\n              <input\n                type=\"submit\"\n                id=\"input_submit\"\n                value=\"Create grid\"\n                onClick={this.handleSubmit} />\n              </p>\n            </form>\n\n            <hr className=\"Separator\" />\n\n            <h3>Pick A Background Color</h3>\n            <CirclePicker\n              onChangeComplete={this.handleBackgroundColor}\n              color={ this.state.background }\n            />\n\n            <hr className=\"Separator\" />\n\n            <h3>Pick A Color</h3>\n            <CirclePicker\n              onChangeComplete={this.handleCellColor}\n              color={ this.state.cellColor }\n            />\n            <p>Hint: Double click to remove a color</p>\n          </div>\n\n          <div className=\"Canvas\">\n            <h2>Design Canvas</h2>\n            <table\n              id=\"pixel_canvas\"\n              style={{backgroundColor: this.state.background}}\n              onMouseDown={this.handleCellColorOnClick}\n              onTouchStart={this.handleCellColorOnClick}\n              onDoubleClick={this.handleColorRemove}>\n            </table>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}